"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7694],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||l[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7426:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Security protocols",sidebar_position:6},c=void 0,u={unversionedId:"api/openapi/security",id:"api/openapi/security",isDocsHomePage:!1,title:"Security protocols",description:"AddSecurity and UseSecurity",source:"@site/docs/api/openapi/security.md",sourceDirName:"api/openapi",slug:"/api/openapi/security",permalink:"/docs/api/openapi/security",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Security protocols",sidebar_position:6},sidebar:"api",previous:{title:"Tags usage",permalink:"/docs/api/openapi/tags"},next:{title:"Extra schemas usage",permalink:"/docs/api/openapi/extra-schemas"}},p=[{value:"AddSecurity and UseSecurity",id:"addsecurity-and-usesecurity",children:[]}],l={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"addsecurity-and-usesecurity"},"AddSecurity and UseSecurity"),(0,o.kt)("p",null,"To add information about the security protocols used decorator ",(0,o.kt)("inlineCode",{parentName:"p"},"@AddSecurity()"),", applied\nto a class - of routing node, create a data layer, requiring the implementation of this Protocol."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@AddSecurity()")," decorator takes as an argument an object that matches the ",(0,o.kt)("inlineCode",{parentName:"p"},"SecuritySchemeObject"),"\nstructure from the ",(0,o.kt)("inlineCode",{parentName:"p"},"openapi3-ts")," library and matches the description for OAS documentation for\n",(0,o.kt)("a",{parentName:"p",href:"https://swagger.io/specification/#security-scheme-object"},(0,o.kt)("inlineCode",{parentName:"a"},"Security Scheme Object")),"."),(0,o.kt)("p",null,"To connect the created security protocol, it is necessary to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"@UseSecurity()")," decorator\nto the ",(0,o.kt)("inlineCode",{parentName:"p"},"middleware"),"-function, after which the specified rules take effect, passing the class that\ninitiates this protocol as an argument."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'// describe a schema that corresponds to the authorization of bearer token\nconst BearerSecuritySchema = {\n  type: "http",\n  in: "header",\n  name: "Authorization",\n  scheme: "bearer",\n};\n\n// define that the protocol "bearer" is the class `Auth`\n@AddSecurity(BearerSecuritySchema)\nexport class Auth {\n  user: models.Users;\n  // ...\n  @Post()\n  @Summary("Login/password authentication")\n  @Responses(\n    { status: 200, description: "Success authentication", schema: models.Token },\n    { status: 500, description: "Authentication error", schema: ErrorResponse }\n  )\n  @RequestBody({ description: "Login/password", schema: AuthForm })\n  static async Login(@Body() { login, password }, @Next() next, @Err() err) {\n    const authData = await models.Auth.checkAuth(login, password);\n    if (models.Auth) {\n      const token = await models.Token.generateToken(authData);\n      return token;\n    } else {\n      return err("Wrong authentication data");\n    }\n  }\n\n  // create a layer that requires a valid token for further actions\n  @Middleware()\n  @UseSecurity(Auth) // specify which security protocol is used\n  @Responses({ status: 403, description: "Access denied", schema: ErrorResponse })\n  static async Required(\n    @Headers("authorization") token,\n    @This() _this: Auth,\n    @Next() next,\n    @Err() err\n  ) {\n    const authData = await models.Tokens.checkAuth(token);\n    if (authData) {\n      _this.user = await models.Users.findById(authData.userId);\n      return next();\n    } else {\n      return err("Wrong token");\n    }\n  }\n}\n\n// ... root.ts\n\n@Bridge("/auth", Auth)\n@Bridge("/account", Account)\nclass Root {\n  // ...\n}\n// .. account.ts\n// all methods in the route node `Account` require authorization\n// and they are used the BearerToken security scheme related to the `Auth` class\n@Use(Auth.Required)\nclass Account {\n  //...\n  @Get()\n  static Info(@StateMap(Auth) { user }: Auth) {\n    const stats = await user.getStats();\n    return { user, stats };\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important"),": Currently, there is no full support for the ",(0,o.kt)("inlineCode",{parentName:"p"},"OAuth")," protocol, which implies\nthe presence of specific read/write/delete permissions."))}d.isMDXComponent=!0}}]);