"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5982],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||c[h]||s;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<s;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7713:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),o=["components"],i={title:"Parameters decorators",sidebar_position:4},l="Parameters decorators",d={unversionedId:"api/koa/parameters",id:"api/koa/parameters",isDocsHomePage:!1,title:"Parameters decorators",description:"All methods participating in route nodes must use decorated parameters in order to correctly",source:"@site/docs/api/koa/parameters.md",sourceDirName:"api/koa",slug:"/api/koa/parameters",permalink:"/docs/api/koa/parameters",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Parameters decorators",sidebar_position:4},sidebar:"api",previous:{title:"Bridges and Middlewares",permalink:"/docs/api/koa/middlewares"},next:{title:"OpenAPI support",permalink:"/docs/api/openapi/index"}},u=[{value:"Args",id:"args",children:[{value:"Custom arguments decorators",id:"custom-arguments-decorators",children:[]}]},{value:"Ctx",id:"ctx",children:[]},{value:"Req, Res",id:"req-res",children:[]},{value:"Next",id:"next",children:[]},{value:"Err",id:"err",children:[{value:"Other ways to catch errors",id:"other-ways-to-catch-errors",children:[]}]},{value:"Query",id:"query",children:[]},{value:"Body",id:"body",children:[]},{value:"Params",id:"params",children:[]},{value:"Headers",id:"headers",children:[]},{value:"State",id:"state",children:[]},{value:"Session",id:"session",children:[]},{value:"Files",id:"files",children:[]},{value:"Cursor",id:"cursor",children:[]},{value:"Route",id:"route",children:[]},{value:"StateMap",id:"statemap",children:[]},{value:"This",id:"this",children:[]}],c={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"parameters-decorators"},"Parameters decorators"),(0,s.kt)("p",null,"All methods participating in route nodes must use decorated parameters in order to correctly\noperate with the context of actions. All decorators return isolated values in the context of\nthe current request."),(0,s.kt)("h2",{id:"args"},"Args"),(0,s.kt)("p",null,"The basic decorator ",(0,s.kt)("inlineCode",{parentName:"p"},"@Args")," allows you to get the general data structure that is the current context\nof query being executed."),(0,s.kt)("p",null,"This structure has the interface:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface IArgs {\n  ctx: Context;\n  next: Next;\n  route: IRoute;\n  cursor: ICursor;\n}\n")),(0,s.kt)("p",null,"Where:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ctx")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"next")," are typical values used by ",(0,s.kt)("inlineCode",{parentName:"li"},"koa")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"route")," is a structure, pointing to the endpoint of the route"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cursor")," is a structure pointing to the current point of the route")),(0,s.kt)("p",null,"Let's dwell on ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"route"),", as they play an important role in organizing routes structures."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," has the interface:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface ICursor {\n  constructor: Function; // the class that is currently being executed\n  property: string; // the method name that is currently being executed\n  handler: Function; // the function that is currently being executed (handler === constructor[property])\n  prefix: string; // prefix of the route segment that the cursor is currently traversing\n}\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," has the interface:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface IRoute {\n  constructor: Function; // the class that contains the endpoint of the route\n  property: string; // the name of the method to be called at the endpoint of the route\n  handler: Function; // the function that will be called at the end point of the route (handler === constructor[property])\n  method: string; // the method that is applied to the endpoint\n  path: string; // full path of the route (as a pattern with parameters `/ files /: filename`)\n  cursors: Function[]; // a list of all cursors including this route\n  middlewares: Function[]; // a list of compiled functions for execution in `koa` context (functions `(ctx, next)=> {...}`)\n}\n")),(0,s.kt)("p",null,"Consider an example of the method ",(0,s.kt)("inlineCode",{parentName:"p"},"GET /users/user_:id"),", which is composed of a chain static methods\nof three classes, decorated with ",(0,s.kt)("inlineCode",{parentName:"p"},"@Middleware"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"@Bridge")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"@Endpoint"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"[Root.Init, Users.Init, Users.UserBridge, User.Init, User.Index];\n")),(0,s.kt)("p",null,"When accessing this route, all functions of the chain will be sequentially called, and if each of them\nwill correctly return a ",(0,s.kt)("inlineCode",{parentName:"p"},"next")," value, will be called the final function in which is expected the result."),(0,s.kt)("p",null,"On any part of the route in any middleware, the ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," value will look like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  constructor: User,\n  property: `Index`,\n  handler: User.Index,\n  method: "get",\n  path: "/users/user_:id",\n  cursors: [\n    { constructor: Root, property: "Init", handler: Root.Init, prefix: "/" },\n    { constructor: Users, property: "Init", handler: Users.Init, prefix: "/users" },\n    { constructor: Users, property: "UserBridge", handler: Users.UserBridge, prefix: "/users/user_:id", },\n    { constructor: User, property: "Init", handler: User.Init, prefix: "/users/user_:id" },\n    { constructor: User, property: "Index", handler: User.Index, prefix: "/users/user_:id" },\n  ],\n  middlewares: [async (ctx, next)=> {...}, ....]\n};\n')),(0,s.kt)("p",null,"Thus, at any point on the route, you can get information about the destination, and if necessary\nperform any checks or log actions."),(0,s.kt)("p",null,"The value of ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," will be different at each location in the route.\nFor the first element, it will be equal to:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  constructor: Root,\n  property: `Init`,\n  handler: Root.Init,\n  prefix: '/'\n}\n")),(0,s.kt)("p",null,"For the second element, it will be:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  constructor: Users,\n  property: `Init`,\n  handler: Users.Init,\n  prefix: '/users'\n}\n")),(0,s.kt)("p",null,"For the third:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  constructor: Users,\n  property: `UserBridge`,\n  handler: Users.UserBridge,\n  prefix: '/users/user_:id'\n}\n")),(0,s.kt)("p",null,"For the fourth:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  constructor: User,\n  property: `Init`,\n  handler: User.Init,\n  prefix: '/users/user_:id'\n}\n")),(0,s.kt)("p",null,"For the fifth:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  constructor: User,\n  property: `Index`,\n  handler: User.Index,\n  prefix: '/users/user_:id'\n}\n")),(0,s.kt)("p",null,"Thus, at each step of the route, reflexive information about who is processing it and in what section\ncan be obtained. It can be used for logging, controlling access to routes, as well as saving and\napplying contextual data in any of its sections."),(0,s.kt)("p",null,"The presence of the ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor")," value in ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," makes it possible to use values from\nthe structure ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.$StateMap = new WeakMap"),", which are described in more detail in the description\nfor decorators ",(0,s.kt)("a",{parentName:"p",href:"#statemap"},(0,s.kt)("inlineCode",{parentName:"a"},"StateMap"))," and ",(0,s.kt)("a",{parentName:"p",href:"#this"},(0,s.kt)("inlineCode",{parentName:"a"},"This")),"."),(0,s.kt)("p",null,"The values of the ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," object are the same for all points along the route. The values in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"route")," structure can be extended with the ",(0,s.kt)("a",{parentName:"p",href:"./middlewares#marker"},(0,s.kt)("inlineCode",{parentName:"a"},"@Marker"))," decorator (described below)"),(0,s.kt)("p",null,"For a ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," object, the value ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor")," can be changed in a special case: if is applied\nthe overload decorator ",(0,s.kt)("a",{parentName:"p",href:"./middlewares#sticker"},(0,s.kt)("inlineCode",{parentName:"a"},"Sticker"))," (described below)"),(0,s.kt)("h3",{id:"custom-arguments-decorators"},"Custom arguments decorators"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Args")," decorator allows you to accept a function as argument, which will be passed a structure\nof ",(0,s.kt)("inlineCode",{parentName:"p"},"IArgs")," from which specific values can be retrieved and returned. Asynchronous functions\nare allowed."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Args, Get } from "aom";\nconst getUrl = (args) => args.ctx.url;\nclass Index {\n  @Get()\n  static Main(@Args(getUrl) url) {\n    return url;\n  }\n}\n')),(0,s.kt)("p",null,"You can create your own argument decorators using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Args")," call:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Args, Get } from "aom";\nconst Url = () => {\n  const handler = (args) => args.ctx.url;\n  return Args(handler);\n};\nclass Index {\n  @Get()\n  static Main(@Url() url) {\n    return url;\n  }\n}\n')),(0,s.kt)("p",null,"All existing argument decorators are special cases of the ",(0,s.kt)("inlineCode",{parentName:"p"},"@Args")," decorator."),(0,s.kt)("h2",{id:"ctx"},"Ctx"),(0,s.kt)("p",null,"Decorator ",(0,s.kt)("inlineCode",{parentName:"p"},"@Ctx()")," returns the standard ",(0,s.kt)("inlineCode",{parentName:"p"},"koa")," object ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx"),", to which its typical methods can be applied,\nextracted standard, or, if specific libraries were used, special values."),(0,s.kt)("h2",{id:"req-res"},"Req, Res"),(0,s.kt)("p",null,"The decorators ",(0,s.kt)("inlineCode",{parentName:"p"},"@Req()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"@Res()")," return the standard ",(0,s.kt)("inlineCode",{parentName:"p"},"koa")," objects ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.req")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.res"),".\nThey do not accept any arguments, and allows to work with the context values at a low level."),(0,s.kt)("h2",{id:"next"},"Next"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Next()")," decorator allows you to get a special ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),"-function."),(0,s.kt)("p",null,"In general, the ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),"-function is used in the same way as the standard ",(0,s.kt)("inlineCode",{parentName:"p"},"koa")," ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),"-function:\nit indicates that is expected the result from the next function in the middlewares chain. Most often\nused as a return value in ",(0,s.kt)("inlineCode",{parentName:"p"},"middleware"),"."),(0,s.kt)("p",null,"When using arguments, the ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),"-function allows you to return the result from another ",(0,s.kt)("inlineCode",{parentName:"p"},"endpoint"),"\nor ",(0,s.kt)("inlineCode",{parentName:"p"},"middleware"),". Accepts a sequence of static methods as arguments, which are the endpoint or middleware."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'@Use(User.Init)\nclass User {\n  data: any;\n\n  @Middleware()\n  static async Init(@Params("user_id") userId, @This() user: User, @Next() next) {\n    user.data = await models.Users.findById(userId);\n    return next(); // when called with no arguments, indicates that the next function in the chain is expected\n  }\n\n  @Get()\n  static Info(@This() { data }: User) {\n    return data;\n  }\n\n  @Patch()\n  static async Update(@This() { data }: User, @Body() body, @Next() next) {\n    const { _id } = data;\n    await models.Users.update({ _id }, { $set: body });\n    // can take a chain of middleware and endpoint as arguments\n    // executes them sequentially and returns the result corresponding to the last value in the chain\n    // breaks the execution in the case of error\n    return next(User.Init, User.Info);\n  }\n}\n')),(0,s.kt)("h2",{id:"err"},"Err"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Err()")," decorator returns an ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),"-function. In general, ",(0,s.kt)("inlineCode",{parentName:"p"},"aom")," will react to ",(0,s.kt)("inlineCode",{parentName:"p"},"throw")," anywhere\nin the call chain, and return it as a 500 error (or use the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," from the error object)."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),"-function received by the ",(0,s.kt)("inlineCode",{parentName:"p"},"@Err")," decorator will return an error with the specified\n",(0,s.kt)("inlineCode",{parentName:"p"},"status")," code and additional ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," information."),(0,s.kt)("p",null,"The decorator can take as an argument an error constructor, which will be used when an error is generated.\n",(0,s.kt)("strong",{parentName:"p"},"Important"),": the error constructor must be inherited from the class ",(0,s.kt)("inlineCode",{parentName:"p"},"Error"),"."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," function uses the arguments:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"message: string - error message, required"),(0,s.kt)("li",{parentName:"ul"},"status?: number - error code, default 500"),(0,s.kt)("li",{parentName:"ul"},"data?: any - custom structure with error data")),(0,s.kt)("p",null,"The function result can be returned via ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"throw"),"."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Params, Err, Next, Middleware } from "aom";\n\n// define specific ErrorResponse class extends on standart Error\nclass ErrorResponse extends Error {\n  status: number;\n  data: any;\n  constructor(message, status = 500, data = undefined) {\n    this.message = message;\n    this.status = status;\n    this.data = data;\n  }\n\n  static toJSON() {\n    return { message: this.message, status: this.status, data: this.data };\n  }\n}\n\n@Use(User.Init)\nclass User {\n  @Middleware()\n  static async Init(@Params("user_id") userId, @Err(ErrorResponse) err, @Next() next) {\n    const user = await models.Users.findById(userId);\n    if (user) {\n      return next();\n    } else {\n      // will return an error with a 404 code and the message "user not found"\n      // the value `data` will be an object with a parameter that did not pass validation\n      // an instance of the ErrorResponse class will be created\n      return err("user not found", 404, { user_id: userId });\n    }\n  }\n  // or\n  @Middleware()\n  static async Init(@Params("user_id") userId, @Err() err, @Next() next) {\n    const user = await models.Users.findById(userId);\n    if (user) {\n      return next();\n    } else {\n      // will return an error with a 404 code and the message "user not found"\n      // the value `data` will be an object with a parameter that did not pass validation\n      // an instance of the Error class will be created\n      return err("user not found", 404, { user_id: userId });\n    }\n  }\n}\n')),(0,s.kt)("h3",{id:"other-ways-to-catch-errors"},"Other ways to catch errors"),(0,s.kt)("p",null,"The call of the decorated methods in ",(0,s.kt)("inlineCode",{parentName:"p"},"aom")," occurs inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"try {} catch (e) {}")," construct:\nany",(0,s.kt)("inlineCode",{parentName:"p"}," throw")," will be interpreted as an error on the route, even if it was called by a third-party library,\nand will be returned as the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.body = e"),", interrupting the route."),(0,s.kt)("p",null,"Instead of calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," function, you can also return an error instance: ",(0,s.kt)("inlineCode",{parentName:"p"},"aom")," checks\nif the returned value is an error object, then it will stop executing the route, and return\nan error with a code of 500, or with the value ",(0,s.kt)("inlineCode",{parentName:"p"},"status"),", if it present in the object values."),(0,s.kt)("p",null,"Thus, instead of the ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),"-function, you can use your own error type, which is inherited from the\n",(0,s.kt)("inlineCode",{parentName:"p"},"Error")," class, using the ",(0,s.kt)("inlineCode",{parentName:"p"},"throw")," or returning the instance of class."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// ... use the classs ErrorResponse, decribed above\nclass Auth {\n  @Middleware()\n  static Required(@Next() next, @Headers("authorization") token) {\n    if (await models.Auth.checkToken(token)) {\n      return next();\n    } else {\n      return new ErrorResponse("access denied", 403);\n    }\n  }\n}\n')),(0,s.kt)("h2",{id:"query"},"Query"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Query()")," decorator allows you to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.query")," value typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Get, Query } from "aom";\nimport fs from "fs";\n\nclass Files {\n  @Get()\n  static Index(@Query() query) {\n    const { name } = query;\n    return fs\n      .readdirSync(__dirname)\n      .filter((filename) => (name ? filename.search(name) >= 0 : true));\n  }\n}\n')),(0,s.kt)("p",null,"The decorator can take a handler function as an argument, in which you can transform or\ncheck the incoming values."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const QueryParser = (query) => {\n  const { offset = 0, limit = 10, sort = "name", ...where } = query;\n  return { offset, limit, sort, where };\n};\n\nclass Users {\n  @Get("/search")\n  static Search(@Query(QueryParser) { where, offset, sort, limit }) {\n    return models.Users.find(where).order(sort).offset(offset).limit(limit);\n  }\n}\n')),(0,s.kt)("h2",{id:"body"},"Body"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Body()")," decorator allows you to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.request.body")," value typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Get, Body } from "aom";\nimport fs from "fs";\n\nclass Users {\n  @Post()\n  static save(@Body() body) {\n    return models.Users.create(body);\n  }\n}\n')),(0,s.kt)("p",null,"The decorator can take a handler function as an argument, in which you can transform or\ncheck the incoming values."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// using the packages `class-transformer` and `class-validator`\n// assuming that the data model applies the appropriate decorators\nimport { plainToClass } from "class-transformer";\nimport { validate } from "class-validator";\n// allowed to use asynchronous functions in handlers\nconst ValidateBody = async (body) => {\n  const safeBody = plainToClass(models.Users, { ...body });\n  const validateErrors = await validate(safeBody, { whitelist: true });\n\n  if (validateErrors.length) {\n    throw Object.assign(new Error("validation error"), { data: validateErrors });\n  }\n  return safeBody;\n};\n\nclass Users {\n  @Post("/add")\n  static Add(@Body(ValidateBody) userData) {\n    // `userData` will definitely contain safe data that can be added to the database\n    return models.Users.create({ ...userData });\n  }\n}\n')),(0,s.kt)("h2",{id:"params"},"Params"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Params()")," decorator allows you to get ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.params")," values typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),". May take a parameter\nname as an argument, returning its value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Get, Middleware, Params, Next } from "aom";\n\nclass User {\n  @Middleware()\n  static async Init(@Params() params, @Next() next) {\n    const user = await models.Users.findById(params.user_id);\n    return next();\n  }\n  // or\n  @Middleware()\n  static async Init(@Params("user_id") userId, @Next() next) {\n    const user = await models.Users.findById(userId);\n    return next();\n  }\n}\n')),(0,s.kt)("h2",{id:"headers"},"Headers"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Headers()")," decorator allows you to get ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.headers")," values typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),". May take a parameter\nname as an argument, returning its value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Get, Headers, Middleware, Next } from "aom";\n\nclass Auth {\n  @Middleware()\n  static async Init(@Headers() headers, @Next() next) {\n    const checkToken = await models.Auth.checkToken(headers.authorization);\n    return next();\n  }\n  // or\n  @Middleware()\n  static async Init(@Headers("authorization") authToken, @Next() next) {\n    const checkToken = await models.Auth.checkToken(authToken);\n    return next();\n  }\n}\n')),(0,s.kt)("h2",{id:"state"},"State"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@State()")," decorator allows you to get ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.state")," values typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),". May take a parameter\nname as an argument, returning its value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Get, State, Params, Middleware, Next } from "aom";\n\n@Use(User.Init)\nclass User {\n  // save the object into `state`\n  @Middleware()\n  static async Init(@State() state, @Params("user_id") userId, @Next() next) {\n    state.user = await models.Users.findById(userId);\n    return next();\n  }\n\n  // get the values from `state`\n  @Get()\n  static async Index(@State("user") user) {\n    return user;\n  }\n}\n')),(0,s.kt)("h2",{id:"session"},"Session"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Session()")," decorator allows you to get ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.session")," values typical of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),". May take a parameter\nname as an argument, returning its value."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Important"),": you must use middleware libraries to use sessions in ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),"\n(for example: ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/koa-session"},(0,s.kt)("inlineCode",{parentName:"a"},"koa-session")),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Middleware, Post, Delete, Session, Body } from "aom";\n\n@Use(Basket.Init)\nclass Basket {\n  // make sure there is a list for storing items in the basket\n  @Middleware()\n  static Init(@Session() session, @Next() next) {\n    if (!session.basket) {\n      session.basket = [];\n    }\n    return next();\n  }\n  // add item to cart\n  @Post()\n  static async AddItem(@Body() item, @Session("basket") basket) {\n    basket.push(item);\n    return basket;\n  }\n\n  // clear the basket\n  @Delete()\n  static async Clear(@Session() session) {\n    session.basket = [];\n    return basket;\n  }\n}\n')),(0,s.kt)("h2",{id:"files"},"Files"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Files()")," decorator allows you to get data from ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.request.files"),", which is typical for the most\n",(0,s.kt)("inlineCode",{parentName:"p"},"koa")," libraries to upload files."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Important"),": you must use middleware libraries to upload files in ",(0,s.kt)("inlineCode",{parentName:"p"},"koa"),"\n(for example: ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/koa-body"},(0,s.kt)("inlineCode",{parentName:"a"},"koa-body")),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { Post, Files } from "aom";\nimport fs from "fs";\nimport path from "path";\n\nclass Files {\n  // wait for uploading the only file\n  @Post()\n  static UploadFiles(@Files("file") file: File) {\n    const filename = path.join(__dirname, file.name);\n    fs.renameSync(file.path, filename);\n    return file;\n  }\n  // wait for uploading the list of files\n  @Post("/mass_upload")\n  static UploadFiles(@Files() files: Record<string, File>) {\n    const filenames = [];\n    Object.keys(files).forEach((key) => {\n      const file = files[key];\n      const filename = path.join(__dirname, file.name);\n      fs.renameSync(file.path, filename);\n      filenames.push(filename);\n    });\n    return filenames;\n  }\n}\n')),(0,s.kt)("h2",{id:"cursor"},"Cursor"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Cursor()")," decorator allows you to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor")," value described above."),(0,s.kt)("h2",{id:"route"},"Route"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@Route()")," decorator allows you to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"route")," value described above."),(0,s.kt)("h2",{id:"statemap"},"StateMap"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"aom")," extends the context value of ",(0,s.kt)("inlineCode",{parentName:"p"},"koa")," with the special construction ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.$StateMap = new WeakMap()"),",\nwhich allows you to store associations based on abstract keys in the context. This allows to make\nassociations based on the classes that make up the route nodes."),(0,s.kt)("p",null,"The most common use of ",(0,s.kt)("inlineCode",{parentName:"p"},"@StateMap()")," is to store local states of class instances in a ",(0,s.kt)("inlineCode",{parentName:"p"},"middleware"),"\nfunction and then apply them in other methods."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@StateMap()")," decorator can take an argument that will return a value from the store with a key\nequal to this argument."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'class Auth {\n  user: models.Users;\n  login: models.UserLogins;\n  // create a layer that determines by the token whether authorization is available to the user\n  // and if available, saves authorization information in stateMap by the class key: user and login\n  @Middleware()\n  static Init(@Headers("authorization") token, @Next() next, @StateMap() stateMap, @Err() err) {\n    const authData = models.Auth.checkToken(token);\n    if (authData) {\n      const auth = new this(); // since the method is called with the same context, `this` is the `Auth` class\n      auth.user = await models.Users.findById(authData.userId);\n      auth.login = await models.UserLogins.findById(authData.userLoginId);\n      stateMap.set(this, auth);\n    } else {\n      return err("wrong auth", 403, { token });\n    }\n  }\n}\n// ... then we will get the authorization information in another middleware or endpoint\n\n@Use(Auth.Init) // define that successful authorization is required to access the route node\nclass Account {\n  // this method will be guaranteed to be called if authorization by token was successful\n  // which means that StateMap will have a value by the Auth key, which is an instance of this class\n  // with defined values\n  @Get()\n  static async Index(@StateMap(Auth) auth: Auth, @Next() next) {\n    const { user, login } = auth;\n    // user is a data model object `models.Users`, all its methods are available to it\n    const stat = await user.getStat();\n    return { user, login, stat };\n  }\n}\n')),(0,s.kt)("p",null,"The use of ",(0,s.kt)("inlineCode",{parentName:"p"},"WeakMap")," is due to the criteria for speed and memory optimization for storing values.\nIf desired, you can overload it by creating a ",(0,s.kt)("inlineCode",{parentName:"p"},"middleware")," that will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"Map")," store."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'@Use(Root.Init) // being the first, Root.Init will be called before all requests in all route branches\n@Bridge("/files", Files)\n@Bridge("/users", Users)\nclass Root {\n  @Middleware()\n  static Init(@Ctx() ctx, @Next() next) {\n    // overload the ctx variable\n    ctx.$StateMap = new Map();\n    return next();\n  }\n\n  @Get()\n  static Index() {\n    return "index page";\n  }\n}\n')),(0,s.kt)("h2",{id:"this"},"This"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@This()")," decorator is an extension of the ",(0,s.kt)("inlineCode",{parentName:"p"},"@StateMap()")," decorator. It checks\nif ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.$StateMap")," has a key value equal to the value of ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor")," in the current ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor"),". Thus,\nin general, it checks if the ",(0,s.kt)("inlineCode",{parentName:"p"},"StateMap")," has a value for the current class that is currently doing the work,\nand if not, creates its singletone instance and returns the value."),(0,s.kt)("p",null,"The most common case of the ",(0,s.kt)("inlineCode",{parentName:"p"},"@This()")," decorator is to use the same route node in the initiating\n",(0,s.kt)("inlineCode",{parentName:"p"},"middleware")," and",(0,s.kt)("inlineCode",{parentName:"p"}," endpoints"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'@Use(User.Init)\nclass User {\n  user: models.Users;\n  stat: any;\n\n  @Middleware()\n  static async Init(@Params() { user_id }, @Next() next, @Err() err, @This() _this: User) {\n    const userInfo = await models.Users.findById(user_id);\n    if (userInfo) {\n      _this.user = userInfo;\n      _this.stat = await userInfo.getStat();\n      return next();\n    } else {\n      return err("user not found", 404);\n    }\n  }\n\n  @Get()\n  static Info(@This() user: User) {\n    return user; // returns { user, stat }\n  }\n\n  @Delete()\n  static async Delete(@This() { user }: User) {\n    const result = await user.delete();\n    return result;\n  }\n}\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@This()")," decorator can take another class as an argument. In this case, will be returned the value for\nthis class from ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.$StateMap"),", and if it was not there, an instance of this class will be created\nand returned, with the specified argument stored in ",(0,s.kt)("inlineCode",{parentName:"p"},"ctx.$StateMap"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'class Files {\n  where = {};\n\n  @Get()\n  static Index(@This() { where }: Files) {\n    return models.Files.find({ ...where });\n  }\n}\n\n// ...\nclass User {\n  user: models.Users;\n\n  @Bridge("/files", Files)\n  static userFiles(@This() { user }: User, @This(Files) files: Files, @Next() next) {\n    files.where = { userId: user.id };\n    return next();\n  }\n}\n')),(0,s.kt)("p",null,"Thus, using the decorator ",(0,s.kt)("inlineCode",{parentName:"p"},"@StateMap()")," allows you to store an arbitrary value by key,\nwhile ",(0,s.kt)("inlineCode",{parentName:"p"},"@This()")," always returns a singletone instance of the class passed in the argument\nor in the current cursor."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Important"),": all classes for which the ",(0,s.kt)("inlineCode",{parentName:"p"},"@This")," decorator will be used must be able to create their\nown instances without arguments, since the decorator does not support passing any values to the constructor."))}p.isMDXComponent=!0}}]);