"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9045],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(t),m=s,f=l["".concat(c,".").concat(m)]||l[m]||d[m]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=l;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},876:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return l}});var r=t(7462),s=t(3366),a=(t(7294),t(3905)),o=["components"],i={title:"Responses data structure",sidebar_position:4},c=void 0,p={unversionedId:"api/openapi/responses",id:"api/openapi/responses",isDocsHomePage:!1,title:"Responses data structure",description:"Responses",source:"@site/docs/api/openapi/responses.md",sourceDirName:"api/openapi",slug:"/api/openapi/responses",permalink:"/docs/api/openapi/responses",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Responses data structure",sidebar_position:4},sidebar:"api",previous:{title:"Path and query paratemers",permalink:"/docs/api/openapi/parameters"},next:{title:"Request body structure",permalink:"/docs/api/openapi/request-body"}},u=[{value:"Responses",id:"responses",children:[]}],d={toc:u};function l(e){var n=e.components,t=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"responses"},"Responses"),(0,a.kt)("p",null,"Information about the structure of responses returned in a method is generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Responses()"),"\ndecorator. This decorator allows you to accumulate many answer options, if it is implied by the\nlogic of the route."),(0,a.kt)("p",null,"It takes as arguments a sequence of objects that satisfy the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface OpenApiResponse {\n  status: number; // response status code\n  schema: SchemaObject | ThisRefContainer |Function | any; // a JSON-schema or an object that generates JSON in JSON-schema\n  contentType?: string; // content type, default `application/json`\n  isArray?: boolean; // a flag that a array of objects (collection) is returned, by default `false`\n  description?: string; // response description\n}\n")),(0,a.kt)("p",null,"An example of how this decorator works:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// describe a typical error that can be returned\n@JSONSchema({\n  description: "standart error response",\n})\nexport class ErrorResponse extends Error {\n  @IsNumber()\n  @JSONSchema({\n    description: "code of error",\n    examples: ["404", "500"],\n  })\n  status: number;\n\n  @IsString()\n  @JSONSchema({\n    description: "error message",\n    examples: ["Not Found", "Access denied"],\n  })\n  message: string;\n\n  @IsOptional()\n  @JSONSchema({\n    anyOf: [{ type: "array", items: { type: "object" } }, { type: "object" }],\n    description: "error details",\n    examples: [\n      `[{"property": "name", "error": "must be not empty"}]`,\n      `{"errors": ["wrong value", "weak password"]}`,\n    ],\n  })\n  data: any;\n\n  constructor(message, status = 500, data = undefined) {\n    super(message);\n    this.status = status;\n    this.data = data;\n  }\n\n  toJSON() {\n    return { message: this.message, status: this.status, data: this.data };\n  }\n\n  static toJSON(): SchemaObject {\n    return targetConstructorToSchema(this);\n  }\n}\n\n// ... auth.ts\nclass Auth {\n  // at the middleware add a 403 response that will apply to all endpoints requiring authorization\n  @Middleware()\n  @Responses({ status: 403, description: "access denied error", schema: ErrorResponse })\n  static async Required(@Headers("authorization") token, @Err(ErrorResponse) err, @Next() next) {\n    const authData = await models.Auth.checkToken(token);\n    if (authData) {\n      return next();\n    } else {\n      return err("access denied", 403, { token });\n    }\n  }\n}\n\n// ... users.ts\n@Use(Auth.Required)\nclass Users {\n  @Get()\n  @Summary("Get users list")\n  @Responses({\n    status: 200,\n    desciption: "Users list",\n    isArray: true,\n    schema: models.Users,\n  })\n  static Index() {\n    return models.Users.find();\n  }\n\n  @Post()\n  @Summary("Add new user")\n  @Responses(\n    {\n      status: 200,\n      description: "user info",\n      schema: models.Users,\n    },\n    { status: 500, description: "adding user error", schema: ErrorResponse }\n  )\n  static Add(@Body() body) {\n    return models.Users.create({ ...body });\n  }\n}\n')),(0,a.kt)("p",null,"Thus, for the methods of the route node ",(0,a.kt)("inlineCode",{parentName:"p"},"Users"),", in addition to the responses declared for them, will\nalso be added a variant with the error ",(0,a.kt)("inlineCode",{parentName:"p"},"403"),", since each of these methods requires authorization."))}l.isMDXComponent=!0}}]);