"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[829],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},107:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={title:"Bridges and Middlewares",sidebar_position:3},l=void 0,d={unversionedId:"api/koa/middlewares",id:"api/koa/middlewares",isDocsHomePage:!1,title:"Bridges and Middlewares",description:"Bridges and Middlewares",source:"@site/docs/api/koa/middlewares.md",sourceDirName:"api/koa",slug:"/api/koa/middlewares",permalink:"/docs/api/koa/middlewares",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Bridges and Middlewares",sidebar_position:3},sidebar:"api",previous:{title:"Endpoints decorators",permalink:"/docs/api/koa/endpoints"},next:{title:"Parameters decorators",permalink:"/docs/api/koa/parameters"}},c=[{value:"Bridges and Middlewares",id:"bridges-and-middlewares",children:[]},{value:"Marker",id:"marker",children:[]},{value:"Sticker",id:"sticker",children:[]},{value:"Cyclic dependencies",id:"cyclic-dependencies",children:[]}],p={toc:c};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"bridges-and-middlewares"},"Bridges and Middlewares"),(0,i.kt)("p",null,"Middleware layers are created using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Middleware()")," decorator. It takes no arguments, and\nsimply allows the specified method to be used as an intermediate layer to any other element of\nthe route node: an endpoint, bridge, other middleware, or the entire route node."),(0,i.kt)("p",null,"Connection of ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware")," is done using the decorator ",(0,i.kt)("inlineCode",{parentName:"p"},"@Use()"),", which takes as arguments\na sequence of ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware"),"-functions: ",(0,i.kt)("inlineCode",{parentName:"p"},"@Use (Root.Init, Auth.Required, Users.Init)"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Use()")," decorator can be applied to an endpoint, an entire route node, another middleware, or a bridge.\nAll middlewares are always executed before the element to which they are applied."),(0,i.kt)("p",null,"To connect route elements to each other use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Bridge")," decorator."),(0,i.kt)("p",null,"The arguments to the decorator are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefix: string")," - route address prefix, may contain a parameter contextual to the target route element"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nextRoute: Function")," - next route node: a decorated class that can contain other bridges, middlewares, and endpoints")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Bridge")," decorator can be applied to a class or a static class method. In the second case, the\nclass method acts as a middleware to the route node being connected."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// ... index.ts\nimport { Get, Bridge, Use, Middleware } from "aom";\nimport logger from "logger";\nimport Files from "./files";\n\n@Bridge("/files", Files) // the Files route node is accessible by the `/files` prefix relative to the current node\nclass Index {\n  @Get()\n  @Use(Root.Logger) // before the `GET /` method, a middleware with logging will be used\n  static Hello() {\n    return `Hello, I\'m aom`;\n  }\n\n  @Middleware()\n  static Logger(@Ctx() ctx, @Next() next) {\n    logger.debug(ctx);\n    return next();\n  }\n}\n\n// Files.ts\nimport fs from "fs";\nimport path from "path";\nimport { Get, Bridge, Params, StateMap, Next, Err } from "aom";\nimport FileInfo from "./fileinfo";\n\nclass Files {\n  @Get()\n  static Index() {\n    return fs.readdirSync(__dirname);\n  }\n\n  @Bridge("/:filename", FileInfo) // expects a parameter - filename - as the next chunk of the path\n  static prepare(\n    @Params("filename") filename: string,\n    @StateMap() stateMap: WeakMap<any, any>,\n    @Err() err,\n    @Next() next\n  ) {\n    // get the full name of the file, using the directory name\n    filename = path.join(__dirname, filename);\n    // if file exists\n    if (fs.existsSync(filename)) {\n      // make and instance of connected class\n      const fileInfo = new FileInfo();\n      // save the filename\n      fileInfo.filename = filename;\n      // save the instance to StateMap\n      stateMap.set(FileInfo, fileInfo);\n      return next();\n    } else {\n      return err("file not found", 404, [filename]);\n    }\n  }\n}\n\n// ... fileinfo.ts\nimport getFileInfo from "get-file-info";\nimport fs from "fs";\n\n@Use(FileInfo.Init) // before all node methods, the `FileInfo.Init` middleware is executed\nclass FileInfo {\n  filename: string; // full filename\n  info: any; // file info\n\n  @Get()\n  static Index(@Ctx() ctx, @This() _this: FileInfo) {\n    // set the content type according to the mime-type of the file\n    ctx.set("Content-Type", _this.info.type);\n    return fs.readFileSync(_this.filename);\n  }\n\n  @Delete()\n  static Delete(@This() { filename }: FileInfo) {\n    fs.unlinkSync(filename);\n    return `file ${filename} successfully removed`;\n  }\n\n  @Middleware()\n  static Init(@This() _this: FileInfo, @Next() next) {\n    // since it is known for sure that this file exists\n    // then we get information about it without checking for errors\n    _this.info = getFileInfo(_this.filename);\n    return next();\n  }\n}\n')),(0,i.kt)("p",null,"The bridge can be connected with the ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," prefix: in this case, all methods of the connected node\nwill be located in the prefix-space of the node to which the connection is made."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important"),": during assembly, all bridges are connected after the ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoints")," of the current route node.\nThus, if a collision suddenly occurs in the values of ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix"),", the priority will remain\nwith the methods connected last, that is, via ",(0,i.kt)("inlineCode",{parentName:"p"},"@Bridge"),". The developer is obliged to independently\nmonitor the address space, which he or she uses."),(0,i.kt)("h2",{id:"marker"},"Marker"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Marker()")," decorator allows you to enrich the information about the destination in the route map,\nspecifying that for the ",(0,i.kt)("inlineCode",{parentName:"p"},"route")," element in the chain of ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware")," preceding it there are ",(0,i.kt)("inlineCode",{parentName:"p"},"cursor"),"\nelements with certain ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix")," values, to which some special logic applied."),(0,i.kt)("p",null,"The decorator is applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware"),"-function, so that the moment this middleware is used\nin any part of the route map, the marker is applied to the endpoint according to the rules of the\nmarking function."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Marker()")," decorator accepts a mark function as an argument, which must take two arguments:\n",(0,i.kt)("inlineCode",{parentName:"p"},"route")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cursor"),". The cursor will always be the middleware to which the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Marker")," decorator is applied"),(0,i.kt)("p",null,"Marking is set in the process of assembling a route map and does not operate with context. The\npresence of a marking in a route element can serve as a basis for additional contextual checks:\nauthority roles, access rights, and other compound operations."),(0,i.kt)("p",null,"Let's consider the use of markings using the example of access control to waypoints."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// for checking access rights, is used a data model that store the final and intermediate sections\n// of the route with an indication of the roles that these rights are allowed\n// users can have one or more roles that allow him to access different methods\nclass Access {\n  // a middleware that checks that a user authorized in the context is allowed access\n  // to this segment of the route\n  @Middleware()\n  // define that this layer is a `@Marker` using the specific marking function\n  @Marker(Access.setMark)\n  static Check(\n    @StateMap(Auth) { user }: Auth, // user credentials\n    @Route() route, // endpoint from which it is important to know `path` and `method` values\n    @Cursor() cursor, // cursor from which it is important to know `prefix` value\n    @Next() next,\n    @Err() err\n  ) {\n    // if a check is performed for the user, then let him pass this layer leading to the specific endpoint\n    if (user.checkAccess(route, cursor)) {\n      return next();\n    } else {\n      // otherwise we will return a 403 error\n      return err("access denied", 403);\n    }\n  }\n\n  // define the marker name\n  static markerName = "check_access";\n  // marking funciton\n  static setMark(route: IRoute, cursor: ICursor) {\n    const { markerName } = this;\n    // if there is no required marker for the `route` element, then create it\n    if (!route[markerName]) {\n      route[markerName] = [];\n    }\n    // add the current cursor to the list for route\n    route[markerName].push(cursor);\n  }\n}\n// ... apply the created marker\n// ...\n\nimport { $aom } from "./server";\n\n@Bridge("/users", Users)\nclass Root {\n  @Get()\n  static Index() {\n    return $aom.routes;\n  }\n\n  @Get("/info")\n  // apply middleware that performs the marking function\n  // marking will propagate to the `Root.Secure` method\n  @Use(Access.Check)\n  static Secure() {\n    return "this route is secure";\n  }\n}\n// apply middleware that performs the labeling function\n// marking will apply to all methods of the `Users` route node\n@Use(Access.Check)\nclass Users {\n  @Get()\n  static Index() {\n    return models.Users.find();\n  }\n\n  @Post("/add")\n  static Add(@Body() body) {\n    return models.Users.create({ ...body });\n  }\n\n  @Delete("/:user_id")\n  @Use(Access.Check)\n  static Delete(@Params() { user_id }) {\n    return models.Users.remove({ _id: user_id });\n  }\n}\n')),(0,i.kt)("p",null,"As a result of this operation, the following values will appear in the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"routes")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'[\n  {\n    method: "get",\n    path: "/",\n  },\n  {\n    method: "get",\n    path: "/secure",\n    check_access: [{ prefix: "/secure" }],\n  },\n  {\n    method: "get",\n    path: "/users",\n    check_access: [{ prefix: "/users" }],\n  },\n  {\n    method: "delete",\n    path: "/users/:user_id",\n    check_access: [{ prefix: "/users" }, { prefix: "/users/:user_id" }],\n  },\n  {\n    method: "post",\n    path: "/users/add",\n    check_access: [{ prefix: "/users" }],\n  },\n];\n')),(0,i.kt)("p",null,"The presence of a ",(0,i.kt)("inlineCode",{parentName:"p"},"check_access")," value for endpoints will indicate that these points are\ncontrolled by ",(0,i.kt)("inlineCode",{parentName:"p"},"Access.Check"),' middleware. Thus, the marking "raised up" information that\ncan be used to visualize the structure of requests and use those of them to which the\nrelevant marking procedures should be applied.'),(0,i.kt)("h2",{id:"sticker"},"Sticker"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Sticker ()")," decorator is used in situations where generic classes are used to create route nodes\nfrom which active route nodes inherit."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// // to quickly create api methods around the catalog data models, we will create a class\n// that will provide standard middleware for this data segment, somehow safely filtering incoming values\nclass Catalogs {\n  model: Model;\n  where = {};\n  body = {};\n\n  @Middleware()\n  static SafeQuery(@Query() query, @This() _this, @Next() next) {\n    _this.where = this.FilterQuery(_this.model, query);\n    return next();\n  }\n\n  @Middleware()\n  static SafeBody(@Body() body, @This() _this, @Next() next) {\n    _this.body = this.FilterBody(_this.model, body);\n    return next();\n  }\n\n  // only use values that have passed safe internal validation in the data model\n  static FilterQuery(model, query) {\n    return model.safeQuery(query);\n  }\n\n  // only use values that have passed safe internal validation in the data model\n  static FilterBody(model, body) {\n    return model.safeBody(body);\n  }\n}\n\n// inherit from this class the route node for working with categories\nclass Categories extends Catalogs {\n  model = models.Categories;\n\n  @Get()\n  // let's apply typical data filtering to create search criteria in the data model\n  @Use(Categories.SafeQuery)\n  static Index(@This() _this) {\n    return _this.model.find(_this.where);\n  }\n\n  @Post()\n  // apply typical data filtering to restrict incoming values\n  @Use(Categories.SafeBody)\n  static Add(@This() _this) {\n    return _this.model.create(_this.body);\n  }\n}\n\n// inherit from this class the route node for working with brands\nclass Brands extends Catalogs {\n  model = models.Brands;\n\n  @Get()\n  // let's apply typical data filtering to create search criteria in the data model\n  @Use(Brands.SafeQuery)\n  static Index(@This() _this) {\n    return _this.model.find(_this.where);\n  }\n\n  @Post()\n  // apply typical data filtering to restrict incoming values\n  @Use(Brands.SafeBody)\n  static Add(@This() _this) {\n    return _this.model.create(_this.body);\n  }\n}\n")),(0,i.kt)("p",null,"Although this code contains no compliant errors, it will not work correctly."),(0,i.kt)("p",null,"Due to the class inheritance mechanism in JS, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Brands.SafeBody")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Brands.SafeQuery")," functions\n(as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"Categories.SafeBody")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Categories.SafeQuery"),") will actually return a handle to\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs.SafeQuery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs.SafeBody")," functions, and when called the ",(0,i.kt)("inlineCode",{parentName:"p"},"@This")," decorator\nwill create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs")," class, and when calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterQuery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"FilterBody"),"\nmethods, errors will occur, since there are no data models defined in the context of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs")," class."),(0,i.kt)("p",null,"In order for this code to work, you need to add the decorator ",(0,i.kt)("inlineCode",{parentName:"p"},"@Sticker()")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware")," functions\n",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs.SafeQuery")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Catalogs.SafeBody"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"class Catalogs {\n  model: Model;\n  where = {};\n  body = {};\n\n  @Sticker()\n  @Middleware()\n  static SafeQuery(@Query() query, @This() _this, @Next() next) {\n    _this.where = this.FilterQuery(_this.model, query);\n    return next();\n  }\n\n  @Sticker()\n  @Middleware()\n  static SafeBody(@Body() body, @This() _this, @Next() next) {\n    _this.body = this.FilterBody(_this.model, body);\n    return next();\n  }\n  // ...\n}\n")),(0,i.kt)("p",null,"In this case, for the methods marked with this decorator, a check will be performed:\nwhether ",(0,i.kt)("inlineCode",{parentName:"p"},"route.constructor")," is a descendant of ",(0,i.kt)("inlineCode",{parentName:"p"},"cursor.constructor"),", and if so, the\nvalue of ",(0,i.kt)("inlineCode",{parentName:"p"},"cursor.constructor")," in this method will be replaced with the value of\n",(0,i.kt)("inlineCode",{parentName:"p"},"route.constructor"),' (the value will be, as it were, "sticked", hence the name of the decorator).'),(0,i.kt)("p",null,"This technique works only for ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware"),", and is not yet suitable for ",(0,i.kt)("inlineCode",{parentName:"p"},"endpoint"),". Thus, you\ncannot use a bridge to the parent class with type procedures. This opportunity may appear later."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important"),": The ",(0,i.kt)("inlineCode",{parentName:"p"},"@Sticker")," decorator is an experimental feature and could be significantly\nredesigned and modified."),(0,i.kt)("h2",{id:"cyclic-dependencies"},"Cyclic dependencies"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"aom")," implies the reuse of some classes in the context of others, which can create cyclic module dependencies.\nThis is critical when using the ",(0,i.kt)("inlineCode",{parentName:"p"},"StateMap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"This")," decorators, as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"Bridge")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Use")," decorators."),(0,i.kt)("p",null,"To solve this problem, use the function ",(0,i.kt)("inlineCode",{parentName:"p"},"FwdRef"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// ... users.ts\nimport { Query, This, Bridge, Get } from "aom";\nimport { User } from "./user";\n\n@Bridge(`/user_${User.id}`, User)\nclass Users {\n  model = getModelForClass(classes.Users); // for the context instance, create a typegoose model around the class `classes.Users`\n\n  @Get()\n  static Index(@Query() query, @This() { model }: Users) {\n    return model.find({ ...query });\n  }\n}\n\n// ... user.ts\nimport { Query, This, Bridge, Get, FwdRef } from "aom";\n\n// for eslint, turn off the processing of the cyclic dependency error\n// eslint-disable-next-line import/no-cycle\nimport { Users } from "./users";\n\n@Use(User.Init)\nclass User {\n  // instead of declaring its own data model value for the node, we use it from the `Users` class\n  @Get()\n  static Index(@Query() query, @This(FwdRef(() => Users)) { model }: Users) {\n    return model.find({ ...query });\n  }\n}\n')),(0,i.kt)("p",null,"If you just use ",(0,i.kt)("inlineCode",{parentName:"p"},"@This (Users)"),", then the value ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," will be passed to the decorator in the arguments,\nwhich will result in an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," class, and the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," will be unavailable."),(0,i.kt)("p",null,"For other decorators function ",(0,i.kt)("inlineCode",{parentName:"p"},"FwdRef")," applied as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@Use(FwdRef(()=>Node.Middleware))")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@Bridge('/path', FwdRef(()=>NextNode))")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@StateMap(FwdRef(()=>AnotherNode)"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important"),": It is strongly recommended to use ",(0,i.kt)("inlineCode",{parentName:"p"},"eslint")," with the ",(0,i.kt)("strong",{parentName:"p"},"active")," rule ",(0,i.kt)("inlineCode",{parentName:"p"},"import/no-cycle")," in order\nto detect situations with circular references and correctly apply ",(0,i.kt)("inlineCode",{parentName:"p"},"FwdRef"),"."))}u.isMDXComponent=!0}}]);