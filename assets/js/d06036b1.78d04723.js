"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8302],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9911:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),i=["components"],s={title:"OpenAPI support",sidebar_position:0},l="aom/openapi",p={unversionedId:"api/openapi/index",id:"api/openapi/index",isDocsHomePage:!1,title:"OpenAPI support",description:"Decorators of the aom/openapi collection allow to enrich route nodes with information that,",source:"@site/docs/api/openapi/index.md",sourceDirName:"api/openapi",slug:"/api/openapi/index",permalink:"/docs/api/openapi/index",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"OpenAPI support",sidebar_position:0},sidebar:"api",previous:{title:"Routes inheritance",permalink:"/docs/api/koa/inherits"},next:{title:"Endpoints descriptions",permalink:"/docs/api/openapi/descriptions"}},c=[{value:"Environment formation methodology",id:"environment-formation-methodology",children:[]},{value:"How does this works",id:"how-does-this-works",children:[]}],m={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aomopenapi"},"aom/openapi"),(0,r.kt)("p",null,"Decorators of the ",(0,r.kt)("inlineCode",{parentName:"p"},"aom/openapi")," collection allow to enrich route nodes with information that,\nwhen assembled, generates schemas in the format ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/specification/"},(0,r.kt)("inlineCode",{parentName:"a"},"OAS3")),",\nproviding code auto-documentation."),(0,r.kt)("p",null,"In documentation generation uses principle of sequential processing of sections of\nroute nodes - middlewares and bridges - with the accumulation of relevant information and\nthe compilation of the resulting set on the route endpoint."),(0,r.kt)("p",null,"Thus, if one of the layers during data validation generates a special ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," error, then when\nit is described for this middleware, it will propagate to the information in the ",(0,r.kt)("inlineCode",{parentName:"p"},"responses"),"\nstructure for the entire set of endpoints using this layer. Similar behavior will occur\nwhen generating information about url parameters, security protocols and tags."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important"),": in this documentation will be mentioned the data type ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaObject"),". In this case,\nit means using the interface from the ",(0,r.kt)("inlineCode",{parentName:"p"},"openapi3-ts")," library, which means the typical configuration\nof the object data schema in the ",(0,r.kt)("inlineCode",{parentName:"p"},"openapi")," specification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { SchemaObject } from "openapi3-ts";\n')),(0,r.kt)("h2",{id:"environment-formation-methodology"},"Environment formation methodology"),(0,r.kt)("p",null,"At its core, ",(0,r.kt)("inlineCode",{parentName:"p"},"aom")," aims to reduce the amount of code used and minimize duplicate data structures.\nThe same principles are used in order to make the most of the possibilities of the ",(0,r.kt)("inlineCode",{parentName:"p"},"JavaScript"),"\nlanguage and to enrich the used data structures with an environment that will allow generating\nthe necessary code on demand."),(0,r.kt)("p",null,"Decorators from ",(0,r.kt)("inlineCode",{parentName:"p"},"aom/openapi")," are used exclusively for route nodes, but they accept data model\nreferences as their arguments. The documentation file is generated when the ",(0,r.kt)("inlineCode",{parentName:"p"},"toJSON")," method\nis called, so you need to take care that such data structures have the ability to return a\nvalid structure describing it with the ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON-schema")," standard using their own ",(0,r.kt)("inlineCode",{parentName:"p"},"toJSON")," methods\n(for classes or objects)"),(0,r.kt)("p",null,"It is good practice to use decorators from the libraries ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/class-validator"},(0,r.kt)("inlineCode",{parentName:"a"},"class-validator")),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/class-validator-jsonschema"},(0,r.kt)("inlineCode",{parentName:"a"},"class-validator-jsonschema")),"."),(0,r.kt)("p",null,"For example, in combination with the using the ",(0,r.kt)("inlineCode",{parentName:"p"},"typeorm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"typegoose")," methodology, this allows you\nto create constructs like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// typeorm example\n// use decorators from "class-validator-jsonschema" and "class-validator"\nimport { targetConstructorToSchema, JSONSchema } from "class-validator-jsonschema";\nimport { IsEnum, IsOptional, IsString, IsEnum } from "class-validator";\n// use decorators and constructors from typeorm\nimport { EventSubscriber, Entity, Column, UpdateDateColumn, CreateDateColumn } from "typeorm";\nimport { Index, ObjectIdColumn } from "typeorm";\nimport { BaseEntity } from "typeorm";\n\nenum YesNo {\n  YES = "yes",\n  NO = "no",\n}\n// describe data model: make BaseModel from which will be inherits another classes\n@EventSubscriber()\nexport default class BaseModel extends BaseEntity {\n  @ObjectIdColumn()\n  @JSONSchema({\n    type: "string",\n    readOnly: true,\n  })\n  _id: ObjectId;\n\n  @Expose()\n  @Column({ nullable: false, default: () => YesNo.NO })\n  @Index()\n  @IsEnum(YesNo)\n  @IsOptional()\n  isBlocked: YesNo;\n\n  @CreateDateColumn()\n  @Index()\n  @IsOptional()\n  @JSONSchema({\n    format: "date",\n    type: "string",\n    readOnly: true,\n  })\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  @Index()\n  @IsOptional()\n  @JSONSchema({\n    format: "date",\n    type: "string",\n    readOnly: true,\n  })\n  updatedAt: Date;\n\n  // need to create a static toJSON method that will get the JSON-schema for the current class\n  static toJSON(): SchemaObject {\n    return targetConstructorToSchema(this);\n  }\n}\n\n// make data model Files extends on BaseModel\n@Entity()\nexport default class Files extends BaseModel {\n  @Column()\n  @Index()\n  @IsString()\n  name: string;\n\n  @Column()\n  @IsString()\n  path: string;\n\n  @Column()\n  @IsString()\n  type: string;\n\n  @Column()\n  @IsString()\n  @IsOptional()\n  location?: string;\n}\n')),(0,r.kt)("p",null,"Thus, when the ",(0,r.kt)("inlineCode",{parentName:"p"},"Files")," class will be used for generating JSON, the inherited method ",(0,r.kt)("inlineCode",{parentName:"p"},"static toJSON()"),"\nwill be called and will return a value correct of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OAS3")," specification with a description of\nthe data structure."),(0,r.kt)("p",null,"The same principle should be used for special cases of data structures that can be used during\ndevelopment: input values or specific responses."),(0,r.kt)("p",null,"Example for describing user authorization form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class toJSONSchema {\n  static toJSON(): SchemaObject {\n    return targetConstructorToSchema(this);\n  }\n}\n\nclass AuthForm extends toJSONSchema {\n  @IsString()\n  @JSONSchema({\n    description: "auth login value",\n    example: "user127",\n  })\n  login: string;\n\n  @IsString()\n  @JSONSchema({\n    description: "auth password value",\n    format: "password",\n  })\n  password: string;\n}\n')),(0,r.kt)("p",null,"Instead of using structures that generate a data schema using the ",(0,r.kt)("inlineCode",{parentName:"p"},"toJSON")," method, you can\nuse an object with an existing data schema, including references to other values in the documentation.\nIn this case, it will be necessary to manually control the integrity of such links, which can\ncomplicate the development."),(0,r.kt)("h2",{id:"how-does-this-works"},"How does this works"),(0,r.kt)("p",null,"Decorators from ",(0,r.kt)("inlineCode",{parentName:"p"},"aom/openapi")," describe general schema properties that will be included in\nthe documentation. To get the final structure, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"aom/koa/$")," assembler,\ninto which you need to pass an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenApi")," class, with information initiated\nby the context of this api-service."),(0,r.kt)("p",null,"After all this class, enriched with relevant data during the decomposition of route nodes,\ncan be returned in one of the methods of the initiated API, or passed to a library like ",(0,r.kt)("inlineCode",{parentName:"p"},"swagger-ui"),"\nas a source of JSON data."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// ... openapi.ts\nimport { OpenApi } from "aom";\n// create an instance of the class with the documentation, with basic information contextual to this api-service\nexport default new OpenApi({\n  info: {\n    title: "Test documentation",\n    description: "Example for autodocumentation built on routes decorators",\n    contact: {\n      name: "Kholstinnikov Grigory",\n      email: "mail@scarych.ru",\n    },\n    version: "1.0.0",\n  },\n  openapi: "3.0.1",\n});\n\n// ... root.ts\nimport Docs from "./openapi";\n\n@Bridge("/users", Users)\n@Bridge("/files", Files)\nclass Root {\n  @Summary("Index page")\n  @Get()\n  static Index() {\n    return "aom is working";\n  }\n\n  @Summary("Documentation")\n  @Description("Complete [`OAS3`](https://swagger.io/specification/) documentation")\n  @Get("/openapi.json")\n  static OpenApi() {\n    return Docs; // will automaticaly transformed to JSON\n  }\n}\n')),(0,r.kt)("p",null,"To apply data from decorators to a documentation file, you need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"docs")," method\nin the assembler, passing in it an initiated instance of the class with documentation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// ... server.ts\nimport koa from "koa";\nimport koaRouter from "koa-router";\nimport { $ } from "aom";\nimport Docs from "./openapi";\nimport Root from "./root";\n\nconst app = new koa();\nconst router = new koaRouter();\n\nnew $(Root)\n  // assemble the routes\n  .eachRoute(({ method, path, middlewares }) => {\n    router[method](path, ...middlewares);\n  })\n  // attach documentation\n  .docs(Docs);\n\napp.use(router.routes()).use(router.allowedMethods());\napp.listen(3000);\n')))}d.isMDXComponent=!0}}]);