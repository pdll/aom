"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8722],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2599:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),s=["components"],o={title:"Path and query paratemers",sidebar_position:3},p=void 0,l={unversionedId:"api/openapi/parameters",id:"api/openapi/parameters",isDocsHomePage:!1,title:"Path and query paratemers",description:"PathParameters",source:"@site/docs/api/openapi/parameters.md",sourceDirName:"api/openapi",slug:"/api/openapi/parameters",permalink:"/docs/api/openapi/parameters",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Path and query paratemers",sidebar_position:3},sidebar:"api",previous:{title:"Endpoints descriptions",permalink:"/docs/api/openapi/descriptions"},next:{title:"Responses data structure",permalink:"/docs/api/openapi/responses"}},u=[{value:"PathParameters",id:"pathparameters",children:[]},{value:"Parameters",id:"parameters",children:[]}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"pathparameters"},"PathParameters"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@PathParameters()")," decorator allows you to describe a reference url parameter with some kind\nof dynamic value. Most often it is an identifier of a database record, or some enum value."),(0,i.kt)("p",null,"The decorator allows you to accumulate values if it is implied by the route logic. The decorator\ncan be set to the ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware"),"- or the ",(0,i.kt)("inlineCode",{parentName:"p"},"bridge"),"-function. In this case, it applies to all methods\nthat are in the pluggable node."),(0,i.kt)("p",null,"The decorator takes as an argument an object of the following interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'interface OpenApiPathParameter {\n  // key - the full value of the parameter in the url string, including regular expression delimiters\n  [parameter: string]: {\n    name: string; // parameter name\n    schema: SchemaObject; // parameter data schema OAS-specified\n    description?: string; // parameter description\n    in?: "query" | "header" | "cookie" | "path"; // parameter location: header, path, query string, cookie; default `path`\n    required?: Boolean; // required flag, default is `true`\n  };\n}\n')),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class Users {\n  @Bridge("/user_:user_id", User)\n  @PathParameters({\n    ":user_id": {\n      name: "user_id",\n      description: "User identifier",\n      schema: { type: "number" },\n    },\n  })\n  static userBridge(@Next() next) {\n    return next();\n  }\n}\n\nclass User {\n  @Get()\n  @Summary("User info")\n  static Info(@Params("user_id") userId) {\n    return models.Users.findById(userId);\n  }\n\n  @Delete()\n  @Summary("Delete user")\n  static Info(@Params("user_id") userId) {\n    return models.Users.remove({ id: userId });\n  }\n}\n')),(0,i.kt)("p",null,"For all methods in the route node ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," in the documentation will be modified ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," value:\nthe fragment ",(0,i.kt)("inlineCode",{parentName:"p"},"/user_:user_id")," will be replaced with ",(0,i.kt)("inlineCode",{parentName:"p"},"/user_{user_id}"),"; and to the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"parameters"),"\nwill be added next value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "user_id",\n  "description": "User identifier",\n  "schema": {\n    "type": "number"\n  },\n  "in": "path",\n  "required": true\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important")," You should pay special attention to how the parameter is specified in the key\nof this structure."),(0,i.kt)("p",null,"Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenApi")," specification obliges to use the notation like ",(0,i.kt)("inlineCode",{parentName:"p"},"{param}")," to describe\nthe parameter in the path, while ",(0,i.kt)("inlineCode",{parentName:"p"},"koa")," and other web frameworks use the ",(0,i.kt)("inlineCode",{parentName:"p"},":param")," notation to\ndefine parameters, which also implies a possible refinement with a regular expression,\nthen exactly the full spelling of the parameter should be used as the key value (",(0,i.kt)("inlineCode",{parentName:"p"},"[parameter:string]"),"),\nincluding the symbol ",(0,i.kt)("inlineCode",{parentName:"p"},":")," and possible regexp rules."),(0,i.kt)("p",null,"Therefore, if a complex restriction is implied, the parameter value, for example, when you works with\nvalues of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ObjectId")," type specific to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MongoDb")," database (that is, 24 characters combining\nLatin letters and numbers), which can be safe written as ",(0,i.kt)("inlineCode",{parentName:"p"},"user_:user_id(.{24})"),", then this spelling\nmust be the key. Otherwise, the parser will not be able to make the replacement, and the required\nvalue will be missing in the documentation."),(0,i.kt)("p",null,"To optimize this process, it is recommended to use the following description of parameters and\ntheir patterns:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// use the User class to store information about what parameters it will connect to other nodes\n@Use(User.Init)\nclass User {\n  // the name of the parameter by which it can be obtained in the arguments to the methods\n  static id = "user_id";\n  // full spelling of the parameter, using restrictions by regular expression\n  static toString() {\n    return `:${this.id}(.{24})`;\n  }\n  // parameter schema using both the exact meanings of name and spelling\n  static parameterSchema() {\n    return {\n      [`${this}`]: {\n        name: this.id,\n        description: "User identifier",\n        schema: {\n          type: "string",\n          pattern: "[a-z,0-9]{24}",\n        },\n      },\n    };\n  }\n\n  @Middleware()\n  @PathParameters(User.parameterSchema())\n  // use the parameter name into argument decorator\n  static Init(@Params(User.id) userId, @Next() next, @Err() err) {\n    // ... some middleware logic\n  }\n}\n\n//... usage in other route nodes\n@Bridge(`/user_${User}`, User) // will be received the spelling of the parameter including restrictions on the number of characters\nclass Users {\n  // ... some class methods\n}\n')),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"To add to the documentation information about parameters that can be passed in the query string,\nheaders and cookies, you need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Parameters")," decorator."),(0,i.kt)("p",null,"It takes as arguments a sequence of values of interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'interface OpenApiParameter {\n  name: string; // parameter name\n  in: "query" | "header" | "cookie" | "path"; // parameter location: header, path, query string, cookie\n  schema: SchemaObject; // parameter data schema OAS-specified\n  description?: string; // parameter description\n  required?: Boolean; // flag of parameter required, default: false\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@Parameters")," decorator applies exclusively to the route endpoint."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'class Brands {\n  @Summary("Brands catalog")\n  @Responses({ status: 200, isArray: true, schema: models.Brands })\n  // allows to use search by fields\n  @Parameters(\n    // `title` (string)\n    { name: "title", in: "query", schema: { type: "string" } },\n    // `enabled` (enum)\n    { name: "enabled", in: "query", schema: { type: "string", enum: ["yes", "no"] } }\n  )\n  @Get()\n  static Index(@Query() query) {\n    return models.Brands.find({ ...query });\n  }\n}\n')))}m.isMDXComponent=!0}}]);